{"version":3,"sources":["components/FilterHandler.js","components/AddPerson.js","components/Persons.js","styles.js","components/Notification.js","modules/persons.js","App.js","serviceWorker.js","index.js"],"names":["FilterHandler","props","filter","onChange","react_default","a","createElement","value","AddPerson","onSubmit","valueName","valueNumber","onChangeName","onChangeNumber","Person","_ref","name","number","Persons","persons","onClick","map","person","index","toLowerCase","includes","className","key","Persons_Person","id","styles","notification","background","fontSize","borderStyle","borderRadius","padding","marginBottom","Notification","message","color","style","Object","objectSpread","baseUrl","App","_useState","useState","_useState2","slicedToArray","setPersons","_useState3","_useState4","newName","setNewName","_useState5","_useState6","newNumber","setNewNumber","_useState7","_useState8","setFilter","_useState9","_useState10","setNotification","_useState11","_useState12","notificationStyling","setNotificationStyling","useEffect","axios","get","then","response","data","components_Notification","components_FilterHandler","event","target","components_AddPerson","preventDefault","newObject","personObj","find","window","confirm","concat","put","setTimeout","catch","post","error","components_Persons","personsFiltered","delete","remove","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uLAWeA,EATO,SAAAC,GAAS,IACrBC,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,SAChB,OACEC,EAAAC,EAAAC,cAAA,0CACqBF,EAAAC,EAAAC,cAAA,SAAOC,MAAOL,EAAQC,SAAUA,MCa1CK,EAjBG,SAAAP,GAAS,IACjBQ,EAAmER,EAAnEQ,SAAUC,EAAyDT,EAAzDS,UAAWC,EAA8CV,EAA9CU,YAAaC,EAAiCX,EAAjCW,aAAcC,EAAmBZ,EAAnBY,eAExD,OACET,EAAAC,EAAAC,cAAA,QAAMG,SAAUA,GACdL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BADF,SAEQF,EAAAC,EAAAC,cAAA,SAAOC,MAAOG,EAAWP,SAAUS,IAAeR,EAAAC,EAAAC,cAAA,WAF1D,WAGUF,EAAAC,EAAAC,cAAA,SAAOC,MAAOI,EAAaR,SAAUU,KAE/CT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCCXFQ,EAAS,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAMC,EAARF,EAAQE,OAAR,OAAoBb,EAAAC,EAAAC,cAAA,SAAIU,EAAJ,IAAWC,IAiB/BC,EAfC,SAAAjB,GAAS,IACfkB,EAA6BlB,EAA7BkB,QAASjB,EAAoBD,EAApBC,OAAQkB,EAAYnB,EAAZmB,QACzB,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACCa,EAAQE,IAAI,SAACC,EAAQC,GAAT,OAAmBD,EAAON,KAAKQ,cAAcC,SAASvB,EAAOsB,eACtEpB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,kBAAkBC,IAAKJ,GACpCnB,EAAAC,EAAAC,cAACsB,EAAD,CAAQZ,KAAMM,EAAON,KAAMC,OAAQK,EAAOL,SAC1Cb,EAAAC,EAAAC,cAAA,UAAQc,QAAS,kBAAMA,EAAQE,EAAOO,MAAtC,WAEF,iBCDKC,EAZA,CACbC,aAAc,CACZC,WAAY,YACZC,SAAU,GACVC,YAAa,QACbC,aAAc,EACdC,QAAS,GACTC,aAAc,KCKHC,EAVM,SAAAvB,GAAwB,IAArBwB,EAAqBxB,EAArBwB,QAASC,EAAYzB,EAAZyB,MAE/B,QACID,GACAnC,EAAAC,EAAAC,cAAA,OAAKmC,MAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAOZ,EAAOC,aAAd,CAA4BS,WACpCpC,EAAAC,EAAAC,cAAA,UAAKiC,qBCPPK,EAAU,oCCkGDC,EA3FH,WAAM,IAAAC,EACeC,mBAAS,IADxBC,EAAAN,OAAAO,EAAA,EAAAP,CAAAI,EAAA,GACR3B,EADQ6B,EAAA,GACCE,EADDF,EAAA,GAAAG,EAEgBJ,mBAAS,IAFzBK,EAAAV,OAAAO,EAAA,EAAAP,CAAAS,EAAA,GAERE,EAFQD,EAAA,GAECE,EAFDF,EAAA,GAAAG,EAGoBR,mBAAS,IAH7BS,EAAAd,OAAAO,EAAA,EAAAP,CAAAa,EAAA,GAGRE,EAHQD,EAAA,GAGGE,EAHHF,EAAA,GAAAG,EAIYZ,mBAAS,IAJrBa,EAAAlB,OAAAO,EAAA,EAAAP,CAAAiB,EAAA,GAITzD,EAJS0D,EAAA,GAIDC,EAJCD,EAAA,GAAAE,EAKwBf,mBAAS,MALjCgB,EAAArB,OAAAO,EAAA,EAAAP,CAAAoB,EAAA,GAKT/B,EALSgC,EAAA,GAKKC,EALLD,EAAA,GAAAE,EAMsClB,mBAAS,SAN/CmB,EAAAxB,OAAAO,EAAA,EAAAP,CAAAuB,EAAA,GAMTE,EANSD,EAAA,GAMYE,EANZF,EAAA,GAgDhBG,oBAJa,WDhDGC,IAAMC,IAAI3B,GACX4B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,OCgD9BF,KAAK,SAAAC,GAAQ,OAAIvB,EAAWuB,MAGvB,IA2BhB,OACErE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACqE,EAAD,CAAcpC,QAASR,EAAcS,MAAO2B,IAC5C/D,EAAAC,EAAAC,cAACsE,EAAD,CAAe1E,OAAQA,EAAQC,SAzBT,SAAA0E,GAAK,OAAIhB,EAAUgB,EAAMC,OAAOvE,UA0BtDH,EAAAC,EAAAC,cAACyE,EAAD,CACEtE,SAzEU,SAACoE,GACfA,EAAMG,iBACN,IDLW1D,EALA2D,ECULC,EAAY/D,EAAQgE,KAAK,SAAA7D,GAAM,OAAIA,EAAON,KAAKQ,gBAAkB6B,EAAQ7B,gBAC1E0D,EAcME,OAAOC,QAAP,GAAAC,OAAkBjC,EAAlB,6EACT6B,EAAUjE,OAASwC,GDrBVnC,ECsBF4D,EDrBKZ,IAAMiB,IAAN,GAAAD,OAAa1C,EAAb,KAAA0C,OAAwBhE,EAAOO,IAAMP,GACtCkD,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCqBlCF,KAAK,WACJtB,EAAW/B,EAAQE,IAAI,SAAAC,GAAM,OAAIA,EAAOO,KAAOqD,EAAUrD,GAAKqD,EAAY5D,KAC1E8C,EAAuB,SACvBJ,EAAe,WAAAsB,OAAYjC,EAAZ,eAAAiC,OAAiC7B,IAChD+B,WAAW,kBAAMxB,EAAgB,OAAO,KACxCV,EAAW,IACXI,EAAa,MAEd+B,MAAM,WACLrB,EAAuB,OACvBJ,EAAe,GAAAsB,OAAIJ,EAAUlE,KAAd,0BACfwE,WAAW,kBAAMxB,EAAgB,OAAO,UDvCnCiB,ECYF,CAAEjE,KAAMqC,EAASpC,OAAQwC,GDXpBa,IAAMoB,KAAK9C,EAASqC,GACrBT,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCWlCF,KAAK,SAAAC,GACJvB,EAAW/B,EAAQmE,OAAOb,IAC1BL,EAAuB,SACvBJ,EAAe,SAAAsB,OAAUjC,IACzBmC,WAAW,kBAAMxB,EAAgB,OAAO,OACvCyB,MAAM,SAAAE,GACPvB,EAAuB,OACvBJ,EAAe,GAAAsB,OAAIK,IACnBH,WAAW,kBAAMxB,EAAgB,OAAO,OAE5CV,EAAW,IACXI,EAAa,MA0DXhD,UAAW2C,EACX1C,YAAa8C,EACb7C,aAlCwB,SAAAiE,GAAK,OAAIvB,EAAWuB,EAAMC,OAAOvE,QAmCzDM,eAjC0B,SAAAgE,GAAK,OAAInB,EAAamB,EAAMC,OAAOvE,UAkC/DH,EAAAC,EAAAC,cAACsF,EAAD,CAASzE,QAASA,EAASjB,OAASA,EAAQkB,QA9BtB,SAAAS,GACxB,IAAMP,EAASH,EAAQgE,KAAK,SAAA7D,GAAM,OAAIA,EAAOO,KAAOA,IACpD,GAAMP,GAAU8D,OAAOC,QAAP,UAAAC,OAAyBhE,EAAON,KAAhC,MAA0C,CACxD,IAAM6E,EAAkB1E,EAAQjB,OAAO,SAAAoB,GAAM,OAAIA,EAAOO,KAAOA,KDjDtD,SAAAP,GAEb,OADgBgD,IAAMwB,OAAN,GAAAR,OAAgB1C,EAAhB,KAAA0C,OAA2BhE,EAAOO,IAAMP,GACzCkD,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCgDrCqB,CAAOzE,GACJkD,KAAK,WACJtB,EAAW2C,GACXzB,EAAuB,SACvBJ,EAAe,WAAAsB,OAAYhE,EAAON,OAClCwE,WAAW,kBAAMxB,EAAgB,OAAO,OAEzCyB,MAAM,WACLrB,EAAuB,OACvBJ,EAAe,GAAAsB,OAAIhE,EAAON,KAAX,8CACfwE,WAAW,kBAAMxB,EAAgB,OAAO,aClE9BgC,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjG,EAAAC,EAAAC,cAACgG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.5eb91753.chunk.js","sourcesContent":["import React from 'react'\n\nconst FilterHandler = props => {\n  const { filter, onChange } = props\n  return (\n    <div>\n      rajaa näytettäviä: <input value={filter} onChange={onChange}/>\n    </div>\n  )\n}\n\nexport default FilterHandler\n","import React from 'react'\n\nconst AddPerson = props => {\n  const { onSubmit, valueName, valueNumber, onChangeName, onChangeNumber } = props\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        <h2>lisää uusi</h2>\n        nimi: <input value={valueName} onChange={onChangeName}/><br/>\n        numero: <input value={valueNumber} onChange={onChangeNumber}/>\n      </div>\n      <div>\n        <button >lisää</button>\n      </div>\n    </form>\n  );\n}\n\nexport default AddPerson\n","import React from 'react';\n\nconst Person = ({name, number}) => <p>{name} {number}</p>\n\nconst Persons = props => {\n  const { persons, filter, onClick } = props\n  return (\n    <div>\n      <h2>Numerot</h2>\n      {persons.map((person, index) => person.name.toLowerCase().includes(filter.toLowerCase())\n        ? <div className=\"personContainer\" key={index}>\n            <Person name={person.name} number={person.number}/>\n            <button onClick={() => onClick(person.id)}>delete</button>\n          </div>\n        : null)}\n    </div>\n  )\n}\n\nexport default Persons\n","\nconst styles = {\n  notification: {\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  },\n\n};\n\nexport default styles;","import React from 'react';\nimport styles from '../styles';\n\nconst Notification = ({ message, color }) => {\n  \n  return (\n    !!message &&\n      <div style={{ ...styles.notification, color }}>\n        <h2>{message}</h2>\n      </div>\n  )\n}\n\nexport default Notification\n","import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/api/persons';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst update = person => {\n  const request = axios.put(`${baseUrl}/${person.id}`, person);\n  return request.then(response => response.data);\n}\n\nconst remove = person => {\n  const request = axios.delete(`${baseUrl}/${person.id}`, person);\n  return request.then(response => response.data);\n}\n\nexport {\n  getAll,\n  create,\n  update,\n  remove\n}","import React, { useState, useEffect } from 'react'\nimport FilterHandler from './components/FilterHandler.js'\nimport AddPerson from './components/AddPerson.js'\nimport Persons from './components/Persons.js'\nimport Notification from './components/Notification.js'\nimport { getAll, create, update, remove } from './modules/persons';\nimport './index.css';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [notificationStyling, setNotificationStyling] = useState('green')\n\n  const addUser = (event) => {\n    event.preventDefault();\n    const personObj = persons.find(person => person.name.toLowerCase() === newName.toLowerCase())\n    if (!personObj) {\n      create({ name: newName, number: newNumber })\n        .then(response => {\n          setPersons(persons.concat(response));\n          setNotificationStyling('green');\n          setNotification(`Added ${newName}`);\n          setTimeout(() => setNotification(null), 5000);\n        }).catch(error => {\n          setNotificationStyling('red');\n          setNotification(`${error}`);\n          setTimeout(() => setNotification(null), 5000);\n        });\n      setNewName('');\n      setNewNumber('');\n    } else if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n      personObj.number = newNumber;\n      update(personObj)\n        .then(() => {\n          setPersons(persons.map(person => person.id === personObj.id ? personObj : person));\n          setNotificationStyling('green');\n          setNotification(`Updated ${newName} number to ${newNumber}`);\n          setTimeout(() => setNotification(null), 5000);\n          setNewName('');\n          setNewNumber('')\n        })\n        .catch(() => {\n          setNotificationStyling('red');\n          setNotification(`${personObj.name} has failed to update`);\n          setTimeout(() => setNotification(null), 5000);\n        });\n    }\n  }\n\n  const hook = () => {\n    getAll().then(response => setPersons(response));\n  }\n\n  useEffect(hook, [])\n\n  const handleNameInputChange = event => setNewName(event.target.value)\n\n  const handleNumberInputChange = event => setNewNumber(event.target.value)\n\n  const handleFilterInput = event => setFilter(event.target.value)\n\n  const handleDeletePress = id => {\n    const person = persons.find(person => person.id === id);\n    if (!!person && window.confirm(`Delete ${person.name}?`)) {\n      const personsFiltered = persons.filter(person => person.id !== id);\n      remove(person)\n        .then(() => {\n          setPersons(personsFiltered);\n          setNotificationStyling('green');\n          setNotification(`Removed ${person.name}`);\n          setTimeout(() => setNotification(null), 5000);\n        })\n        .catch(() => {\n          setNotificationStyling('red');\n          setNotification(`${person.name} has already been removed from the server`);\n          setTimeout(() => setNotification(null), 5000);\n        });\n    } \n  }\n\n  return (\n    <div>\n      <h1>Puhelinluettelo</h1>\n      <Notification message={notification} color={notificationStyling}/>\n      <FilterHandler filter={filter} onChange={handleFilterInput}/>\n      <AddPerson\n        onSubmit={addUser}\n        valueName={newName}\n        valueNumber={newNumber}\n        onChangeName={handleNameInputChange}\n        onChangeNumber={handleNumberInputChange}/>\n      <Persons persons={persons} filter ={filter} onClick={handleDeletePress}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}